// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package educode_review_api

import (
	context "context"
	protobuf "educode/protobuf"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion7

// ReviewServiceClient is the client API for ReviewService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type ReviewServiceClient interface {
	Get(ctx context.Context, in *GetRequest, opts ...grpc.CallOption) (ReviewService_GetClient, error)
	Update(ctx context.Context, in *protobuf.Review, opts ...grpc.CallOption) (*emptypb.Empty, error)
	Create(ctx context.Context, opts ...grpc.CallOption) (ReviewService_CreateClient, error)
}

type reviewServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewReviewServiceClient(cc grpc.ClientConnInterface) ReviewServiceClient {
	return &reviewServiceClient{cc}
}

func (c *reviewServiceClient) Get(ctx context.Context, in *GetRequest, opts ...grpc.CallOption) (ReviewService_GetClient, error) {
	stream, err := c.cc.NewStream(ctx, &_ReviewService_serviceDesc.Streams[0], "/educode.review.api.ReviewService/Get", opts...)
	if err != nil {
		return nil, err
	}
	x := &reviewServiceGetClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type ReviewService_GetClient interface {
	Recv() (*protobuf.Review, error)
	grpc.ClientStream
}

type reviewServiceGetClient struct {
	grpc.ClientStream
}

func (x *reviewServiceGetClient) Recv() (*protobuf.Review, error) {
	m := new(protobuf.Review)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *reviewServiceClient) Update(ctx context.Context, in *protobuf.Review, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, "/educode.review.api.ReviewService/Update", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *reviewServiceClient) Create(ctx context.Context, opts ...grpc.CallOption) (ReviewService_CreateClient, error) {
	stream, err := c.cc.NewStream(ctx, &_ReviewService_serviceDesc.Streams[1], "/educode.review.api.ReviewService/Create", opts...)
	if err != nil {
		return nil, err
	}
	x := &reviewServiceCreateClient{stream}
	return x, nil
}

type ReviewService_CreateClient interface {
	Send(*protobuf.Review) error
	CloseAndRecv() (*emptypb.Empty, error)
	grpc.ClientStream
}

type reviewServiceCreateClient struct {
	grpc.ClientStream
}

func (x *reviewServiceCreateClient) Send(m *protobuf.Review) error {
	return x.ClientStream.SendMsg(m)
}

func (x *reviewServiceCreateClient) CloseAndRecv() (*emptypb.Empty, error) {
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	m := new(emptypb.Empty)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// ReviewServiceServer is the server API for ReviewService service.
// All implementations should embed UnimplementedReviewServiceServer
// for forward compatibility
type ReviewServiceServer interface {
	Get(*GetRequest, ReviewService_GetServer) error
	Update(context.Context, *protobuf.Review) (*emptypb.Empty, error)
	Create(ReviewService_CreateServer) error
}

// UnimplementedReviewServiceServer should be embedded to have forward compatible implementations.
type UnimplementedReviewServiceServer struct {
}

func (UnimplementedReviewServiceServer) Get(*GetRequest, ReviewService_GetServer) error {
	return status.Errorf(codes.Unimplemented, "method Get not implemented")
}
func (UnimplementedReviewServiceServer) Update(context.Context, *protobuf.Review) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Update not implemented")
}
func (UnimplementedReviewServiceServer) Create(ReviewService_CreateServer) error {
	return status.Errorf(codes.Unimplemented, "method Create not implemented")
}

// UnsafeReviewServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ReviewServiceServer will
// result in compilation errors.
type UnsafeReviewServiceServer interface {
	mustEmbedUnimplementedReviewServiceServer()
}

func RegisterReviewServiceServer(s grpc.ServiceRegistrar, srv ReviewServiceServer) {
	s.RegisterService(&_ReviewService_serviceDesc, srv)
}

func _ReviewService_Get_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(GetRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(ReviewServiceServer).Get(m, &reviewServiceGetServer{stream})
}

type ReviewService_GetServer interface {
	Send(*protobuf.Review) error
	grpc.ServerStream
}

type reviewServiceGetServer struct {
	grpc.ServerStream
}

func (x *reviewServiceGetServer) Send(m *protobuf.Review) error {
	return x.ServerStream.SendMsg(m)
}

func _ReviewService_Update_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(protobuf.Review)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ReviewServiceServer).Update(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/educode.review.api.ReviewService/Update",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ReviewServiceServer).Update(ctx, req.(*protobuf.Review))
	}
	return interceptor(ctx, in, info, handler)
}

func _ReviewService_Create_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(ReviewServiceServer).Create(&reviewServiceCreateServer{stream})
}

type ReviewService_CreateServer interface {
	SendAndClose(*emptypb.Empty) error
	Recv() (*protobuf.Review, error)
	grpc.ServerStream
}

type reviewServiceCreateServer struct {
	grpc.ServerStream
}

func (x *reviewServiceCreateServer) SendAndClose(m *emptypb.Empty) error {
	return x.ServerStream.SendMsg(m)
}

func (x *reviewServiceCreateServer) Recv() (*protobuf.Review, error) {
	m := new(protobuf.Review)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

var _ReviewService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "educode.review.api.ReviewService",
	HandlerType: (*ReviewServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Update",
			Handler:    _ReviewService_Update_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "Get",
			Handler:       _ReviewService_Get_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "Create",
			Handler:       _ReviewService_Create_Handler,
			ClientStreams: true,
		},
	},
	Metadata: "educode/review/api/v1.proto",
}
