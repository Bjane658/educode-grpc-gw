// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package educode_authenticator_api

import (
	context "context"
	protobuf "educode/protobuf"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion7

// AuthenticatorServiceClient is the client API for AuthenticatorService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type AuthenticatorServiceClient interface {
	Authenticate(ctx context.Context, in *AuthenticationRequest, opts ...grpc.CallOption) (*AuthenticationResponse, error)
	Register(ctx context.Context, in *RegistrationRequest, opts ...grpc.CallOption) (*AuthenticationResponse, error)
	SyncWhitelist(ctx context.Context, in *SyncRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	ResolveUser(ctx context.Context, opts ...grpc.CallOption) (AuthenticatorService_ResolveUserClient, error)
	GetCertificates(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*CertificatesResponse, error)
	ListUsers(ctx context.Context, in *ListRequest, opts ...grpc.CallOption) (AuthenticatorService_ListUsersClient, error)
	UpdateUserRole(ctx context.Context, in *RoleUpdateRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
}

type authenticatorServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewAuthenticatorServiceClient(cc grpc.ClientConnInterface) AuthenticatorServiceClient {
	return &authenticatorServiceClient{cc}
}

func (c *authenticatorServiceClient) Authenticate(ctx context.Context, in *AuthenticationRequest, opts ...grpc.CallOption) (*AuthenticationResponse, error) {
	out := new(AuthenticationResponse)
	err := c.cc.Invoke(ctx, "/educode.authenticator.api.AuthenticatorService/Authenticate", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *authenticatorServiceClient) Register(ctx context.Context, in *RegistrationRequest, opts ...grpc.CallOption) (*AuthenticationResponse, error) {
	out := new(AuthenticationResponse)
	err := c.cc.Invoke(ctx, "/educode.authenticator.api.AuthenticatorService/Register", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *authenticatorServiceClient) SyncWhitelist(ctx context.Context, in *SyncRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, "/educode.authenticator.api.AuthenticatorService/SyncWhitelist", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *authenticatorServiceClient) ResolveUser(ctx context.Context, opts ...grpc.CallOption) (AuthenticatorService_ResolveUserClient, error) {
	stream, err := c.cc.NewStream(ctx, &_AuthenticatorService_serviceDesc.Streams[0], "/educode.authenticator.api.AuthenticatorService/ResolveUser", opts...)
	if err != nil {
		return nil, err
	}
	x := &authenticatorServiceResolveUserClient{stream}
	return x, nil
}

type AuthenticatorService_ResolveUserClient interface {
	Send(*ResolveRequest) error
	Recv() (*protobuf.User, error)
	grpc.ClientStream
}

type authenticatorServiceResolveUserClient struct {
	grpc.ClientStream
}

func (x *authenticatorServiceResolveUserClient) Send(m *ResolveRequest) error {
	return x.ClientStream.SendMsg(m)
}

func (x *authenticatorServiceResolveUserClient) Recv() (*protobuf.User, error) {
	m := new(protobuf.User)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *authenticatorServiceClient) GetCertificates(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*CertificatesResponse, error) {
	out := new(CertificatesResponse)
	err := c.cc.Invoke(ctx, "/educode.authenticator.api.AuthenticatorService/GetCertificates", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *authenticatorServiceClient) ListUsers(ctx context.Context, in *ListRequest, opts ...grpc.CallOption) (AuthenticatorService_ListUsersClient, error) {
	stream, err := c.cc.NewStream(ctx, &_AuthenticatorService_serviceDesc.Streams[1], "/educode.authenticator.api.AuthenticatorService/ListUsers", opts...)
	if err != nil {
		return nil, err
	}
	x := &authenticatorServiceListUsersClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type AuthenticatorService_ListUsersClient interface {
	Recv() (*protobuf.User, error)
	grpc.ClientStream
}

type authenticatorServiceListUsersClient struct {
	grpc.ClientStream
}

func (x *authenticatorServiceListUsersClient) Recv() (*protobuf.User, error) {
	m := new(protobuf.User)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *authenticatorServiceClient) UpdateUserRole(ctx context.Context, in *RoleUpdateRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, "/educode.authenticator.api.AuthenticatorService/UpdateUserRole", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// AuthenticatorServiceServer is the server API for AuthenticatorService service.
// All implementations should embed UnimplementedAuthenticatorServiceServer
// for forward compatibility
type AuthenticatorServiceServer interface {
	Authenticate(context.Context, *AuthenticationRequest) (*AuthenticationResponse, error)
	Register(context.Context, *RegistrationRequest) (*AuthenticationResponse, error)
	SyncWhitelist(context.Context, *SyncRequest) (*emptypb.Empty, error)
	ResolveUser(AuthenticatorService_ResolveUserServer) error
	GetCertificates(context.Context, *emptypb.Empty) (*CertificatesResponse, error)
	ListUsers(*ListRequest, AuthenticatorService_ListUsersServer) error
	UpdateUserRole(context.Context, *RoleUpdateRequest) (*emptypb.Empty, error)
}

// UnimplementedAuthenticatorServiceServer should be embedded to have forward compatible implementations.
type UnimplementedAuthenticatorServiceServer struct {
}

func (UnimplementedAuthenticatorServiceServer) Authenticate(context.Context, *AuthenticationRequest) (*AuthenticationResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Authenticate not implemented")
}
func (UnimplementedAuthenticatorServiceServer) Register(context.Context, *RegistrationRequest) (*AuthenticationResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Register not implemented")
}
func (UnimplementedAuthenticatorServiceServer) SyncWhitelist(context.Context, *SyncRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SyncWhitelist not implemented")
}
func (UnimplementedAuthenticatorServiceServer) ResolveUser(AuthenticatorService_ResolveUserServer) error {
	return status.Errorf(codes.Unimplemented, "method ResolveUser not implemented")
}
func (UnimplementedAuthenticatorServiceServer) GetCertificates(context.Context, *emptypb.Empty) (*CertificatesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetCertificates not implemented")
}
func (UnimplementedAuthenticatorServiceServer) ListUsers(*ListRequest, AuthenticatorService_ListUsersServer) error {
	return status.Errorf(codes.Unimplemented, "method ListUsers not implemented")
}
func (UnimplementedAuthenticatorServiceServer) UpdateUserRole(context.Context, *RoleUpdateRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateUserRole not implemented")
}

// UnsafeAuthenticatorServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to AuthenticatorServiceServer will
// result in compilation errors.
type UnsafeAuthenticatorServiceServer interface {
	mustEmbedUnimplementedAuthenticatorServiceServer()
}

func RegisterAuthenticatorServiceServer(s grpc.ServiceRegistrar, srv AuthenticatorServiceServer) {
	s.RegisterService(&_AuthenticatorService_serviceDesc, srv)
}

func _AuthenticatorService_Authenticate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AuthenticationRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AuthenticatorServiceServer).Authenticate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/educode.authenticator.api.AuthenticatorService/Authenticate",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AuthenticatorServiceServer).Authenticate(ctx, req.(*AuthenticationRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AuthenticatorService_Register_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RegistrationRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AuthenticatorServiceServer).Register(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/educode.authenticator.api.AuthenticatorService/Register",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AuthenticatorServiceServer).Register(ctx, req.(*RegistrationRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AuthenticatorService_SyncWhitelist_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SyncRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AuthenticatorServiceServer).SyncWhitelist(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/educode.authenticator.api.AuthenticatorService/SyncWhitelist",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AuthenticatorServiceServer).SyncWhitelist(ctx, req.(*SyncRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AuthenticatorService_ResolveUser_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(AuthenticatorServiceServer).ResolveUser(&authenticatorServiceResolveUserServer{stream})
}

type AuthenticatorService_ResolveUserServer interface {
	Send(*protobuf.User) error
	Recv() (*ResolveRequest, error)
	grpc.ServerStream
}

type authenticatorServiceResolveUserServer struct {
	grpc.ServerStream
}

func (x *authenticatorServiceResolveUserServer) Send(m *protobuf.User) error {
	return x.ServerStream.SendMsg(m)
}

func (x *authenticatorServiceResolveUserServer) Recv() (*ResolveRequest, error) {
	m := new(ResolveRequest)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func _AuthenticatorService_GetCertificates_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(emptypb.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AuthenticatorServiceServer).GetCertificates(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/educode.authenticator.api.AuthenticatorService/GetCertificates",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AuthenticatorServiceServer).GetCertificates(ctx, req.(*emptypb.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _AuthenticatorService_ListUsers_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(ListRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(AuthenticatorServiceServer).ListUsers(m, &authenticatorServiceListUsersServer{stream})
}

type AuthenticatorService_ListUsersServer interface {
	Send(*protobuf.User) error
	grpc.ServerStream
}

type authenticatorServiceListUsersServer struct {
	grpc.ServerStream
}

func (x *authenticatorServiceListUsersServer) Send(m *protobuf.User) error {
	return x.ServerStream.SendMsg(m)
}

func _AuthenticatorService_UpdateUserRole_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RoleUpdateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AuthenticatorServiceServer).UpdateUserRole(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/educode.authenticator.api.AuthenticatorService/UpdateUserRole",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AuthenticatorServiceServer).UpdateUserRole(ctx, req.(*RoleUpdateRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _AuthenticatorService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "educode.authenticator.api.AuthenticatorService",
	HandlerType: (*AuthenticatorServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Authenticate",
			Handler:    _AuthenticatorService_Authenticate_Handler,
		},
		{
			MethodName: "Register",
			Handler:    _AuthenticatorService_Register_Handler,
		},
		{
			MethodName: "SyncWhitelist",
			Handler:    _AuthenticatorService_SyncWhitelist_Handler,
		},
		{
			MethodName: "GetCertificates",
			Handler:    _AuthenticatorService_GetCertificates_Handler,
		},
		{
			MethodName: "UpdateUserRole",
			Handler:    _AuthenticatorService_UpdateUserRole_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "ResolveUser",
			Handler:       _AuthenticatorService_ResolveUser_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
		{
			StreamName:    "ListUsers",
			Handler:       _AuthenticatorService_ListUsers_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "educode/authenticator/api/v1.proto",
}
