// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package educode_statistic_api

import (
	context "context"
	protobuf "educode/protobuf"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion7

// StatisticServiceClient is the client API for StatisticService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type StatisticServiceClient interface {
	GetDifficulty(ctx context.Context, in *ChallengeId, opts ...grpc.CallOption) (*protobuf.Difficulty, error)
	PostDifficulty(ctx context.Context, in *protobuf.Difficulty, opts ...grpc.CallOption) (*protobuf.Difficulty, error)
	GetSubmissionTimestamp(ctx context.Context, in *ChallengeId, opts ...grpc.CallOption) (*protobuf.SubmissionTimestamp, error)
	PostSubmissionTimestamp(ctx context.Context, in *ChallengeId, opts ...grpc.CallOption) (*protobuf.SubmissionTimestamp, error)
	GetPointsPerChallenge(ctx context.Context, in *Filter, opts ...grpc.CallOption) (*PointsPerChallengeResponse, error)
	GetSubmissionCount(ctx context.Context, in *Filter, opts ...grpc.CallOption) (*SubmissionCountResponse, error)
	GetSubmissionsPerHour(ctx context.Context, in *Filter, opts ...grpc.CallOption) (*SubmissionsPerHourResponse, error)
	GetAverageChallengePoints(ctx context.Context, in *Filter, opts ...grpc.CallOption) (*AverageChallengePointsResponse, error)
	GetSubmissionHighscore(ctx context.Context, in *Filter, opts ...grpc.CallOption) (*SubmissionHighscoreResponse, error)
	PostChallengeCategories(ctx context.Context, in *protobuf.ChallengeCategories, opts ...grpc.CallOption) (*emptypb.Empty, error)
	GetChallengeCategories(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*ChallengeCategoriesResponse, error)
	GetAverageDifficulties(ctx context.Context, in *Filter, opts ...grpc.CallOption) (*AverageDifficultiesResponse, error)
}

type statisticServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewStatisticServiceClient(cc grpc.ClientConnInterface) StatisticServiceClient {
	return &statisticServiceClient{cc}
}

func (c *statisticServiceClient) GetDifficulty(ctx context.Context, in *ChallengeId, opts ...grpc.CallOption) (*protobuf.Difficulty, error) {
	out := new(protobuf.Difficulty)
	err := c.cc.Invoke(ctx, "/educode.statistic.api.StatisticService/getDifficulty", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *statisticServiceClient) PostDifficulty(ctx context.Context, in *protobuf.Difficulty, opts ...grpc.CallOption) (*protobuf.Difficulty, error) {
	out := new(protobuf.Difficulty)
	err := c.cc.Invoke(ctx, "/educode.statistic.api.StatisticService/postDifficulty", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *statisticServiceClient) GetSubmissionTimestamp(ctx context.Context, in *ChallengeId, opts ...grpc.CallOption) (*protobuf.SubmissionTimestamp, error) {
	out := new(protobuf.SubmissionTimestamp)
	err := c.cc.Invoke(ctx, "/educode.statistic.api.StatisticService/getSubmissionTimestamp", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *statisticServiceClient) PostSubmissionTimestamp(ctx context.Context, in *ChallengeId, opts ...grpc.CallOption) (*protobuf.SubmissionTimestamp, error) {
	out := new(protobuf.SubmissionTimestamp)
	err := c.cc.Invoke(ctx, "/educode.statistic.api.StatisticService/postSubmissionTimestamp", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *statisticServiceClient) GetPointsPerChallenge(ctx context.Context, in *Filter, opts ...grpc.CallOption) (*PointsPerChallengeResponse, error) {
	out := new(PointsPerChallengeResponse)
	err := c.cc.Invoke(ctx, "/educode.statistic.api.StatisticService/getPointsPerChallenge", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *statisticServiceClient) GetSubmissionCount(ctx context.Context, in *Filter, opts ...grpc.CallOption) (*SubmissionCountResponse, error) {
	out := new(SubmissionCountResponse)
	err := c.cc.Invoke(ctx, "/educode.statistic.api.StatisticService/getSubmissionCount", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *statisticServiceClient) GetSubmissionsPerHour(ctx context.Context, in *Filter, opts ...grpc.CallOption) (*SubmissionsPerHourResponse, error) {
	out := new(SubmissionsPerHourResponse)
	err := c.cc.Invoke(ctx, "/educode.statistic.api.StatisticService/getSubmissionsPerHour", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *statisticServiceClient) GetAverageChallengePoints(ctx context.Context, in *Filter, opts ...grpc.CallOption) (*AverageChallengePointsResponse, error) {
	out := new(AverageChallengePointsResponse)
	err := c.cc.Invoke(ctx, "/educode.statistic.api.StatisticService/getAverageChallengePoints", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *statisticServiceClient) GetSubmissionHighscore(ctx context.Context, in *Filter, opts ...grpc.CallOption) (*SubmissionHighscoreResponse, error) {
	out := new(SubmissionHighscoreResponse)
	err := c.cc.Invoke(ctx, "/educode.statistic.api.StatisticService/getSubmissionHighscore", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *statisticServiceClient) PostChallengeCategories(ctx context.Context, in *protobuf.ChallengeCategories, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, "/educode.statistic.api.StatisticService/postChallengeCategories", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *statisticServiceClient) GetChallengeCategories(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*ChallengeCategoriesResponse, error) {
	out := new(ChallengeCategoriesResponse)
	err := c.cc.Invoke(ctx, "/educode.statistic.api.StatisticService/getChallengeCategories", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *statisticServiceClient) GetAverageDifficulties(ctx context.Context, in *Filter, opts ...grpc.CallOption) (*AverageDifficultiesResponse, error) {
	out := new(AverageDifficultiesResponse)
	err := c.cc.Invoke(ctx, "/educode.statistic.api.StatisticService/getAverageDifficulties", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// StatisticServiceServer is the server API for StatisticService service.
// All implementations should embed UnimplementedStatisticServiceServer
// for forward compatibility
type StatisticServiceServer interface {
	GetDifficulty(context.Context, *ChallengeId) (*protobuf.Difficulty, error)
	PostDifficulty(context.Context, *protobuf.Difficulty) (*protobuf.Difficulty, error)
	GetSubmissionTimestamp(context.Context, *ChallengeId) (*protobuf.SubmissionTimestamp, error)
	PostSubmissionTimestamp(context.Context, *ChallengeId) (*protobuf.SubmissionTimestamp, error)
	GetPointsPerChallenge(context.Context, *Filter) (*PointsPerChallengeResponse, error)
	GetSubmissionCount(context.Context, *Filter) (*SubmissionCountResponse, error)
	GetSubmissionsPerHour(context.Context, *Filter) (*SubmissionsPerHourResponse, error)
	GetAverageChallengePoints(context.Context, *Filter) (*AverageChallengePointsResponse, error)
	GetSubmissionHighscore(context.Context, *Filter) (*SubmissionHighscoreResponse, error)
	PostChallengeCategories(context.Context, *protobuf.ChallengeCategories) (*emptypb.Empty, error)
	GetChallengeCategories(context.Context, *emptypb.Empty) (*ChallengeCategoriesResponse, error)
	GetAverageDifficulties(context.Context, *Filter) (*AverageDifficultiesResponse, error)
}

// UnimplementedStatisticServiceServer should be embedded to have forward compatible implementations.
type UnimplementedStatisticServiceServer struct {
}

func (UnimplementedStatisticServiceServer) GetDifficulty(context.Context, *ChallengeId) (*protobuf.Difficulty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetDifficulty not implemented")
}
func (UnimplementedStatisticServiceServer) PostDifficulty(context.Context, *protobuf.Difficulty) (*protobuf.Difficulty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PostDifficulty not implemented")
}
func (UnimplementedStatisticServiceServer) GetSubmissionTimestamp(context.Context, *ChallengeId) (*protobuf.SubmissionTimestamp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetSubmissionTimestamp not implemented")
}
func (UnimplementedStatisticServiceServer) PostSubmissionTimestamp(context.Context, *ChallengeId) (*protobuf.SubmissionTimestamp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PostSubmissionTimestamp not implemented")
}
func (UnimplementedStatisticServiceServer) GetPointsPerChallenge(context.Context, *Filter) (*PointsPerChallengeResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetPointsPerChallenge not implemented")
}
func (UnimplementedStatisticServiceServer) GetSubmissionCount(context.Context, *Filter) (*SubmissionCountResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetSubmissionCount not implemented")
}
func (UnimplementedStatisticServiceServer) GetSubmissionsPerHour(context.Context, *Filter) (*SubmissionsPerHourResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetSubmissionsPerHour not implemented")
}
func (UnimplementedStatisticServiceServer) GetAverageChallengePoints(context.Context, *Filter) (*AverageChallengePointsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAverageChallengePoints not implemented")
}
func (UnimplementedStatisticServiceServer) GetSubmissionHighscore(context.Context, *Filter) (*SubmissionHighscoreResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetSubmissionHighscore not implemented")
}
func (UnimplementedStatisticServiceServer) PostChallengeCategories(context.Context, *protobuf.ChallengeCategories) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PostChallengeCategories not implemented")
}
func (UnimplementedStatisticServiceServer) GetChallengeCategories(context.Context, *emptypb.Empty) (*ChallengeCategoriesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetChallengeCategories not implemented")
}
func (UnimplementedStatisticServiceServer) GetAverageDifficulties(context.Context, *Filter) (*AverageDifficultiesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAverageDifficulties not implemented")
}

// UnsafeStatisticServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to StatisticServiceServer will
// result in compilation errors.
type UnsafeStatisticServiceServer interface {
	mustEmbedUnimplementedStatisticServiceServer()
}

func RegisterStatisticServiceServer(s grpc.ServiceRegistrar, srv StatisticServiceServer) {
	s.RegisterService(&_StatisticService_serviceDesc, srv)
}

func _StatisticService_GetDifficulty_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ChallengeId)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(StatisticServiceServer).GetDifficulty(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/educode.statistic.api.StatisticService/getDifficulty",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(StatisticServiceServer).GetDifficulty(ctx, req.(*ChallengeId))
	}
	return interceptor(ctx, in, info, handler)
}

func _StatisticService_PostDifficulty_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(protobuf.Difficulty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(StatisticServiceServer).PostDifficulty(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/educode.statistic.api.StatisticService/postDifficulty",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(StatisticServiceServer).PostDifficulty(ctx, req.(*protobuf.Difficulty))
	}
	return interceptor(ctx, in, info, handler)
}

func _StatisticService_GetSubmissionTimestamp_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ChallengeId)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(StatisticServiceServer).GetSubmissionTimestamp(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/educode.statistic.api.StatisticService/getSubmissionTimestamp",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(StatisticServiceServer).GetSubmissionTimestamp(ctx, req.(*ChallengeId))
	}
	return interceptor(ctx, in, info, handler)
}

func _StatisticService_PostSubmissionTimestamp_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ChallengeId)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(StatisticServiceServer).PostSubmissionTimestamp(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/educode.statistic.api.StatisticService/postSubmissionTimestamp",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(StatisticServiceServer).PostSubmissionTimestamp(ctx, req.(*ChallengeId))
	}
	return interceptor(ctx, in, info, handler)
}

func _StatisticService_GetPointsPerChallenge_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Filter)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(StatisticServiceServer).GetPointsPerChallenge(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/educode.statistic.api.StatisticService/getPointsPerChallenge",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(StatisticServiceServer).GetPointsPerChallenge(ctx, req.(*Filter))
	}
	return interceptor(ctx, in, info, handler)
}

func _StatisticService_GetSubmissionCount_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Filter)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(StatisticServiceServer).GetSubmissionCount(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/educode.statistic.api.StatisticService/getSubmissionCount",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(StatisticServiceServer).GetSubmissionCount(ctx, req.(*Filter))
	}
	return interceptor(ctx, in, info, handler)
}

func _StatisticService_GetSubmissionsPerHour_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Filter)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(StatisticServiceServer).GetSubmissionsPerHour(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/educode.statistic.api.StatisticService/getSubmissionsPerHour",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(StatisticServiceServer).GetSubmissionsPerHour(ctx, req.(*Filter))
	}
	return interceptor(ctx, in, info, handler)
}

func _StatisticService_GetAverageChallengePoints_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Filter)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(StatisticServiceServer).GetAverageChallengePoints(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/educode.statistic.api.StatisticService/getAverageChallengePoints",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(StatisticServiceServer).GetAverageChallengePoints(ctx, req.(*Filter))
	}
	return interceptor(ctx, in, info, handler)
}

func _StatisticService_GetSubmissionHighscore_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Filter)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(StatisticServiceServer).GetSubmissionHighscore(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/educode.statistic.api.StatisticService/getSubmissionHighscore",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(StatisticServiceServer).GetSubmissionHighscore(ctx, req.(*Filter))
	}
	return interceptor(ctx, in, info, handler)
}

func _StatisticService_PostChallengeCategories_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(protobuf.ChallengeCategories)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(StatisticServiceServer).PostChallengeCategories(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/educode.statistic.api.StatisticService/postChallengeCategories",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(StatisticServiceServer).PostChallengeCategories(ctx, req.(*protobuf.ChallengeCategories))
	}
	return interceptor(ctx, in, info, handler)
}

func _StatisticService_GetChallengeCategories_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(emptypb.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(StatisticServiceServer).GetChallengeCategories(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/educode.statistic.api.StatisticService/getChallengeCategories",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(StatisticServiceServer).GetChallengeCategories(ctx, req.(*emptypb.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _StatisticService_GetAverageDifficulties_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Filter)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(StatisticServiceServer).GetAverageDifficulties(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/educode.statistic.api.StatisticService/getAverageDifficulties",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(StatisticServiceServer).GetAverageDifficulties(ctx, req.(*Filter))
	}
	return interceptor(ctx, in, info, handler)
}

var _StatisticService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "educode.statistic.api.StatisticService",
	HandlerType: (*StatisticServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "getDifficulty",
			Handler:    _StatisticService_GetDifficulty_Handler,
		},
		{
			MethodName: "postDifficulty",
			Handler:    _StatisticService_PostDifficulty_Handler,
		},
		{
			MethodName: "getSubmissionTimestamp",
			Handler:    _StatisticService_GetSubmissionTimestamp_Handler,
		},
		{
			MethodName: "postSubmissionTimestamp",
			Handler:    _StatisticService_PostSubmissionTimestamp_Handler,
		},
		{
			MethodName: "getPointsPerChallenge",
			Handler:    _StatisticService_GetPointsPerChallenge_Handler,
		},
		{
			MethodName: "getSubmissionCount",
			Handler:    _StatisticService_GetSubmissionCount_Handler,
		},
		{
			MethodName: "getSubmissionsPerHour",
			Handler:    _StatisticService_GetSubmissionsPerHour_Handler,
		},
		{
			MethodName: "getAverageChallengePoints",
			Handler:    _StatisticService_GetAverageChallengePoints_Handler,
		},
		{
			MethodName: "getSubmissionHighscore",
			Handler:    _StatisticService_GetSubmissionHighscore_Handler,
		},
		{
			MethodName: "postChallengeCategories",
			Handler:    _StatisticService_PostChallengeCategories_Handler,
		},
		{
			MethodName: "getChallengeCategories",
			Handler:    _StatisticService_GetChallengeCategories_Handler,
		},
		{
			MethodName: "getAverageDifficulties",
			Handler:    _StatisticService_GetAverageDifficulties_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "educode/statistic/api/v1.proto",
}
