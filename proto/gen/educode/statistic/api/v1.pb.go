// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.25.0-devel
// 	protoc        v3.17.3
// source: educode/statistic/api/v1.proto

package educode_statistic_api

import (
	protobuf "educode/protobuf"
	_ "google.golang.org/genproto/googleapis/api/annotations"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type ChallengeId struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ChallengeId string `protobuf:"bytes,1,opt,name=challengeId,proto3" json:"challengeId,omitempty"`
}

func (x *ChallengeId) Reset() {
	*x = ChallengeId{}
	if protoimpl.UnsafeEnabled {
		mi := &file_educode_statistic_api_v1_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ChallengeId) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ChallengeId) ProtoMessage() {}

func (x *ChallengeId) ProtoReflect() protoreflect.Message {
	mi := &file_educode_statistic_api_v1_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ChallengeId.ProtoReflect.Descriptor instead.
func (*ChallengeId) Descriptor() ([]byte, []int) {
	return file_educode_statistic_api_v1_proto_rawDescGZIP(), []int{0}
}

func (x *ChallengeId) GetChallengeId() string {
	if x != nil {
		return x.ChallengeId
	}
	return ""
}

type AverageDifficultiesResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Challenges []*protobuf.Difficulty `protobuf:"bytes,1,rep,name=challenges,proto3" json:"challenges,omitempty"`
}

func (x *AverageDifficultiesResponse) Reset() {
	*x = AverageDifficultiesResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_educode_statistic_api_v1_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AverageDifficultiesResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AverageDifficultiesResponse) ProtoMessage() {}

func (x *AverageDifficultiesResponse) ProtoReflect() protoreflect.Message {
	mi := &file_educode_statistic_api_v1_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AverageDifficultiesResponse.ProtoReflect.Descriptor instead.
func (*AverageDifficultiesResponse) Descriptor() ([]byte, []int) {
	return file_educode_statistic_api_v1_proto_rawDescGZIP(), []int{1}
}

func (x *AverageDifficultiesResponse) GetChallenges() []*protobuf.Difficulty {
	if x != nil {
		return x.Challenges
	}
	return nil
}

type ChallengeCategoriesResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Categories []string `protobuf:"bytes,1,rep,name=categories,proto3" json:"categories,omitempty"`
}

func (x *ChallengeCategoriesResponse) Reset() {
	*x = ChallengeCategoriesResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_educode_statistic_api_v1_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ChallengeCategoriesResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ChallengeCategoriesResponse) ProtoMessage() {}

func (x *ChallengeCategoriesResponse) ProtoReflect() protoreflect.Message {
	mi := &file_educode_statistic_api_v1_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ChallengeCategoriesResponse.ProtoReflect.Descriptor instead.
func (*ChallengeCategoriesResponse) Descriptor() ([]byte, []int) {
	return file_educode_statistic_api_v1_proto_rawDescGZIP(), []int{2}
}

func (x *ChallengeCategoriesResponse) GetCategories() []string {
	if x != nil {
		return x.Categories
	}
	return nil
}

type Filter struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	FromDate string `protobuf:"bytes,1,opt,name=fromDate,proto3" json:"fromDate,omitempty"`
	ToDate   string `protobuf:"bytes,2,opt,name=toDate,proto3" json:"toDate,omitempty"`
	Category string `protobuf:"bytes,3,opt,name=category,proto3" json:"category,omitempty"`
}

func (x *Filter) Reset() {
	*x = Filter{}
	if protoimpl.UnsafeEnabled {
		mi := &file_educode_statistic_api_v1_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Filter) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Filter) ProtoMessage() {}

func (x *Filter) ProtoReflect() protoreflect.Message {
	mi := &file_educode_statistic_api_v1_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Filter.ProtoReflect.Descriptor instead.
func (*Filter) Descriptor() ([]byte, []int) {
	return file_educode_statistic_api_v1_proto_rawDescGZIP(), []int{3}
}

func (x *Filter) GetFromDate() string {
	if x != nil {
		return x.FromDate
	}
	return ""
}

func (x *Filter) GetToDate() string {
	if x != nil {
		return x.ToDate
	}
	return ""
}

func (x *Filter) GetCategory() string {
	if x != nil {
		return x.Category
	}
	return ""
}

type SubmissionCountResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Count []*protobuf.SubmissionCount `protobuf:"bytes,1,rep,name=count,proto3" json:"count,omitempty"`
}

func (x *SubmissionCountResponse) Reset() {
	*x = SubmissionCountResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_educode_statistic_api_v1_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SubmissionCountResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SubmissionCountResponse) ProtoMessage() {}

func (x *SubmissionCountResponse) ProtoReflect() protoreflect.Message {
	mi := &file_educode_statistic_api_v1_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SubmissionCountResponse.ProtoReflect.Descriptor instead.
func (*SubmissionCountResponse) Descriptor() ([]byte, []int) {
	return file_educode_statistic_api_v1_proto_rawDescGZIP(), []int{4}
}

func (x *SubmissionCountResponse) GetCount() []*protobuf.SubmissionCount {
	if x != nil {
		return x.Count
	}
	return nil
}

type DifficultyPostRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ChallengeId string `protobuf:"bytes,1,opt,name=challengeId,proto3" json:"challengeId,omitempty"`
	Difficulty  string `protobuf:"bytes,2,opt,name=difficulty,proto3" json:"difficulty,omitempty"`
}

func (x *DifficultyPostRequest) Reset() {
	*x = DifficultyPostRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_educode_statistic_api_v1_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DifficultyPostRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DifficultyPostRequest) ProtoMessage() {}

func (x *DifficultyPostRequest) ProtoReflect() protoreflect.Message {
	mi := &file_educode_statistic_api_v1_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DifficultyPostRequest.ProtoReflect.Descriptor instead.
func (*DifficultyPostRequest) Descriptor() ([]byte, []int) {
	return file_educode_statistic_api_v1_proto_rawDescGZIP(), []int{5}
}

func (x *DifficultyPostRequest) GetChallengeId() string {
	if x != nil {
		return x.ChallengeId
	}
	return ""
}

func (x *DifficultyPostRequest) GetDifficulty() string {
	if x != nil {
		return x.Difficulty
	}
	return ""
}

type PointsPerChallengeResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Points []*protobuf.PointsPerChallenge `protobuf:"bytes,1,rep,name=points,proto3" json:"points,omitempty"`
}

func (x *PointsPerChallengeResponse) Reset() {
	*x = PointsPerChallengeResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_educode_statistic_api_v1_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PointsPerChallengeResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PointsPerChallengeResponse) ProtoMessage() {}

func (x *PointsPerChallengeResponse) ProtoReflect() protoreflect.Message {
	mi := &file_educode_statistic_api_v1_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PointsPerChallengeResponse.ProtoReflect.Descriptor instead.
func (*PointsPerChallengeResponse) Descriptor() ([]byte, []int) {
	return file_educode_statistic_api_v1_proto_rawDescGZIP(), []int{6}
}

func (x *PointsPerChallengeResponse) GetPoints() []*protobuf.PointsPerChallenge {
	if x != nil {
		return x.Points
	}
	return nil
}

type AverageChallengePointsResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Challenges []*protobuf.AverageChallengePoints `protobuf:"bytes,1,rep,name=challenges,proto3" json:"challenges,omitempty"`
}

func (x *AverageChallengePointsResponse) Reset() {
	*x = AverageChallengePointsResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_educode_statistic_api_v1_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AverageChallengePointsResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AverageChallengePointsResponse) ProtoMessage() {}

func (x *AverageChallengePointsResponse) ProtoReflect() protoreflect.Message {
	mi := &file_educode_statistic_api_v1_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AverageChallengePointsResponse.ProtoReflect.Descriptor instead.
func (*AverageChallengePointsResponse) Descriptor() ([]byte, []int) {
	return file_educode_statistic_api_v1_proto_rawDescGZIP(), []int{7}
}

func (x *AverageChallengePointsResponse) GetChallenges() []*protobuf.AverageChallengePoints {
	if x != nil {
		return x.Challenges
	}
	return nil
}

type SubmissionsPerHourResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Hours []*protobuf.SubmissionsPerHour `protobuf:"bytes,1,rep,name=hours,proto3" json:"hours,omitempty"`
}

func (x *SubmissionsPerHourResponse) Reset() {
	*x = SubmissionsPerHourResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_educode_statistic_api_v1_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SubmissionsPerHourResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SubmissionsPerHourResponse) ProtoMessage() {}

func (x *SubmissionsPerHourResponse) ProtoReflect() protoreflect.Message {
	mi := &file_educode_statistic_api_v1_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SubmissionsPerHourResponse.ProtoReflect.Descriptor instead.
func (*SubmissionsPerHourResponse) Descriptor() ([]byte, []int) {
	return file_educode_statistic_api_v1_proto_rawDescGZIP(), []int{8}
}

func (x *SubmissionsPerHourResponse) GetHours() []*protobuf.SubmissionsPerHour {
	if x != nil {
		return x.Hours
	}
	return nil
}

type SubmissionHighscoreResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Highscore []*protobuf.SubmissionHighscoreEntry `protobuf:"bytes,1,rep,name=highscore,proto3" json:"highscore,omitempty"`
}

func (x *SubmissionHighscoreResponse) Reset() {
	*x = SubmissionHighscoreResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_educode_statistic_api_v1_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SubmissionHighscoreResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SubmissionHighscoreResponse) ProtoMessage() {}

func (x *SubmissionHighscoreResponse) ProtoReflect() protoreflect.Message {
	mi := &file_educode_statistic_api_v1_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SubmissionHighscoreResponse.ProtoReflect.Descriptor instead.
func (*SubmissionHighscoreResponse) Descriptor() ([]byte, []int) {
	return file_educode_statistic_api_v1_proto_rawDescGZIP(), []int{9}
}

func (x *SubmissionHighscoreResponse) GetHighscore() []*protobuf.SubmissionHighscoreEntry {
	if x != nil {
		return x.Highscore
	}
	return nil
}

var File_educode_statistic_api_v1_proto protoreflect.FileDescriptor

var file_educode_statistic_api_v1_proto_rawDesc = []byte{
	0x0a, 0x1e, 0x65, 0x64, 0x75, 0x63, 0x6f, 0x64, 0x65, 0x2f, 0x73, 0x74, 0x61, 0x74, 0x69, 0x73,
	0x74, 0x69, 0x63, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x76, 0x31, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x12, 0x15, 0x65, 0x64, 0x75, 0x63, 0x6f, 0x64, 0x65, 0x2e, 0x73, 0x74, 0x61, 0x74, 0x69, 0x73,
	0x74, 0x69, 0x63, 0x2e, 0x61, 0x70, 0x69, 0x1a, 0x1c, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f,
	0x61, 0x70, 0x69, 0x2f, 0x61, 0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x21, 0x65, 0x64, 0x75, 0x63, 0x6f, 0x64, 0x65, 0x2f, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x64, 0x69, 0x66, 0x66, 0x69, 0x63, 0x75, 0x6c,
	0x74, 0x79, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x2b, 0x65, 0x64, 0x75, 0x63, 0x6f, 0x64,
	0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x73, 0x75, 0x62, 0x6d, 0x69,
	0x73, 0x73, 0x69, 0x6f, 0x6e, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x2b, 0x65, 0x64, 0x75, 0x63, 0x6f, 0x64, 0x65, 0x2f, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x73, 0x5f, 0x70,
	0x65, 0x72, 0x5f, 0x63, 0x68, 0x61, 0x6c, 0x6c, 0x65, 0x6e, 0x67, 0x65, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x1a, 0x27, 0x65, 0x64, 0x75, 0x63, 0x6f, 0x64, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x62, 0x75, 0x66, 0x2f, 0x73, 0x75, 0x62, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x5f,
	0x63, 0x6f, 0x75, 0x6e, 0x74, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x2f, 0x65, 0x64, 0x75,
	0x63, 0x6f, 0x64, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x61, 0x76,
	0x65, 0x72, 0x61, 0x67, 0x65, 0x5f, 0x63, 0x68, 0x61, 0x6c, 0x6c, 0x65, 0x6e, 0x67, 0x65, 0x5f,
	0x70, 0x6f, 0x69, 0x6e, 0x74, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x2b, 0x65, 0x64,
	0x75, 0x63, 0x6f, 0x64, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x63,
	0x68, 0x61, 0x6c, 0x6c, 0x65, 0x6e, 0x67, 0x65, 0x5f, 0x63, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72,
	0x69, 0x65, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x2b, 0x65, 0x64, 0x75, 0x63, 0x6f,
	0x64, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x73, 0x75, 0x62, 0x6d,
	0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x73, 0x5f, 0x70, 0x65, 0x72, 0x5f, 0x68, 0x6f, 0x75, 0x72,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x31, 0x65, 0x64, 0x75, 0x63, 0x6f, 0x64, 0x65, 0x2f,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x73, 0x75, 0x62, 0x6d, 0x69, 0x73, 0x73,
	0x69, 0x6f, 0x6e, 0x5f, 0x68, 0x69, 0x67, 0x68, 0x73, 0x63, 0x6f, 0x72, 0x65, 0x5f, 0x65, 0x6e,
	0x74, 0x72, 0x79, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1b, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x65, 0x6d, 0x70, 0x74, 0x79,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0x2f, 0x0a, 0x0b, 0x43, 0x68, 0x61, 0x6c, 0x6c, 0x65,
	0x6e, 0x67, 0x65, 0x49, 0x64, 0x12, 0x20, 0x0a, 0x0b, 0x63, 0x68, 0x61, 0x6c, 0x6c, 0x65, 0x6e,
	0x67, 0x65, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x63, 0x68, 0x61, 0x6c,
	0x6c, 0x65, 0x6e, 0x67, 0x65, 0x49, 0x64, 0x22, 0x5b, 0x0a, 0x1b, 0x41, 0x76, 0x65, 0x72, 0x61,
	0x67, 0x65, 0x44, 0x69, 0x66, 0x66, 0x69, 0x63, 0x75, 0x6c, 0x74, 0x69, 0x65, 0x73, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x3c, 0x0a, 0x0a, 0x63, 0x68, 0x61, 0x6c, 0x6c, 0x65,
	0x6e, 0x67, 0x65, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x65, 0x64, 0x75,
	0x63, 0x6f, 0x64, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x44, 0x69,
	0x66, 0x66, 0x69, 0x63, 0x75, 0x6c, 0x74, 0x79, 0x52, 0x0a, 0x63, 0x68, 0x61, 0x6c, 0x6c, 0x65,
	0x6e, 0x67, 0x65, 0x73, 0x22, 0x3d, 0x0a, 0x1b, 0x43, 0x68, 0x61, 0x6c, 0x6c, 0x65, 0x6e, 0x67,
	0x65, 0x43, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x69, 0x65, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x12, 0x1e, 0x0a, 0x0a, 0x63, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x69, 0x65,
	0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x09, 0x52, 0x0a, 0x63, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72,
	0x69, 0x65, 0x73, 0x22, 0x58, 0x0a, 0x06, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x12, 0x1a, 0x0a,
	0x08, 0x66, 0x72, 0x6f, 0x6d, 0x44, 0x61, 0x74, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x08, 0x66, 0x72, 0x6f, 0x6d, 0x44, 0x61, 0x74, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x74, 0x6f, 0x44,
	0x61, 0x74, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x74, 0x6f, 0x44, 0x61, 0x74,
	0x65, 0x12, 0x1a, 0x0a, 0x08, 0x63, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x08, 0x63, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x22, 0x52, 0x0a,
	0x17, 0x53, 0x75, 0x62, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x43, 0x6f, 0x75, 0x6e, 0x74,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x37, 0x0a, 0x05, 0x63, 0x6f, 0x75, 0x6e,
	0x74, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x65, 0x64, 0x75, 0x63, 0x6f, 0x64,
	0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53, 0x75, 0x62, 0x6d, 0x69,
	0x73, 0x73, 0x69, 0x6f, 0x6e, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x52, 0x05, 0x63, 0x6f, 0x75, 0x6e,
	0x74, 0x22, 0x59, 0x0a, 0x15, 0x44, 0x69, 0x66, 0x66, 0x69, 0x63, 0x75, 0x6c, 0x74, 0x79, 0x50,
	0x6f, 0x73, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x20, 0x0a, 0x0b, 0x63, 0x68,
	0x61, 0x6c, 0x6c, 0x65, 0x6e, 0x67, 0x65, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0b, 0x63, 0x68, 0x61, 0x6c, 0x6c, 0x65, 0x6e, 0x67, 0x65, 0x49, 0x64, 0x12, 0x1e, 0x0a, 0x0a,
	0x64, 0x69, 0x66, 0x66, 0x69, 0x63, 0x75, 0x6c, 0x74, 0x79, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0a, 0x64, 0x69, 0x66, 0x66, 0x69, 0x63, 0x75, 0x6c, 0x74, 0x79, 0x22, 0x5a, 0x0a, 0x1a,
	0x50, 0x6f, 0x69, 0x6e, 0x74, 0x73, 0x50, 0x65, 0x72, 0x43, 0x68, 0x61, 0x6c, 0x6c, 0x65, 0x6e,
	0x67, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x3c, 0x0a, 0x06, 0x70, 0x6f,
	0x69, 0x6e, 0x74, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x24, 0x2e, 0x65, 0x64, 0x75,
	0x63, 0x6f, 0x64, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x50, 0x6f,
	0x69, 0x6e, 0x74, 0x73, 0x50, 0x65, 0x72, 0x43, 0x68, 0x61, 0x6c, 0x6c, 0x65, 0x6e, 0x67, 0x65,
	0x52, 0x06, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x73, 0x22, 0x6a, 0x0a, 0x1e, 0x41, 0x76, 0x65, 0x72,
	0x61, 0x67, 0x65, 0x43, 0x68, 0x61, 0x6c, 0x6c, 0x65, 0x6e, 0x67, 0x65, 0x50, 0x6f, 0x69, 0x6e,
	0x74, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x48, 0x0a, 0x0a, 0x63, 0x68,
	0x61, 0x6c, 0x6c, 0x65, 0x6e, 0x67, 0x65, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x28,
	0x2e, 0x65, 0x64, 0x75, 0x63, 0x6f, 0x64, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75,
	0x66, 0x2e, 0x41, 0x76, 0x65, 0x72, 0x61, 0x67, 0x65, 0x43, 0x68, 0x61, 0x6c, 0x6c, 0x65, 0x6e,
	0x67, 0x65, 0x50, 0x6f, 0x69, 0x6e, 0x74, 0x73, 0x52, 0x0a, 0x63, 0x68, 0x61, 0x6c, 0x6c, 0x65,
	0x6e, 0x67, 0x65, 0x73, 0x22, 0x58, 0x0a, 0x1a, 0x53, 0x75, 0x62, 0x6d, 0x69, 0x73, 0x73, 0x69,
	0x6f, 0x6e, 0x73, 0x50, 0x65, 0x72, 0x48, 0x6f, 0x75, 0x72, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x12, 0x3a, 0x0a, 0x05, 0x68, 0x6f, 0x75, 0x72, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x24, 0x2e, 0x65, 0x64, 0x75, 0x63, 0x6f, 0x64, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53, 0x75, 0x62, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x73,
	0x50, 0x65, 0x72, 0x48, 0x6f, 0x75, 0x72, 0x52, 0x05, 0x68, 0x6f, 0x75, 0x72, 0x73, 0x22, 0x67,
	0x0a, 0x1b, 0x53, 0x75, 0x62, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x48, 0x69, 0x67, 0x68,
	0x73, 0x63, 0x6f, 0x72, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x48, 0x0a,
	0x09, 0x68, 0x69, 0x67, 0x68, 0x73, 0x63, 0x6f, 0x72, 0x65, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x2a, 0x2e, 0x65, 0x64, 0x75, 0x63, 0x6f, 0x64, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x62, 0x75, 0x66, 0x2e, 0x53, 0x75, 0x62, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x48, 0x69,
	0x67, 0x68, 0x73, 0x63, 0x6f, 0x72, 0x65, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x09, 0x68, 0x69,
	0x67, 0x68, 0x73, 0x63, 0x6f, 0x72, 0x65, 0x32, 0xde, 0x0c, 0x0a, 0x10, 0x53, 0x74, 0x61, 0x74,
	0x69, 0x73, 0x74, 0x69, 0x63, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x12, 0x69, 0x0a, 0x0d,
	0x67, 0x65, 0x74, 0x44, 0x69, 0x66, 0x66, 0x69, 0x63, 0x75, 0x6c, 0x74, 0x79, 0x12, 0x22, 0x2e,
	0x65, 0x64, 0x75, 0x63, 0x6f, 0x64, 0x65, 0x2e, 0x73, 0x74, 0x61, 0x74, 0x69, 0x73, 0x74, 0x69,
	0x63, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x43, 0x68, 0x61, 0x6c, 0x6c, 0x65, 0x6e, 0x67, 0x65, 0x49,
	0x64, 0x1a, 0x1c, 0x2e, 0x65, 0x64, 0x75, 0x63, 0x6f, 0x64, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x62, 0x75, 0x66, 0x2e, 0x44, 0x69, 0x66, 0x66, 0x69, 0x63, 0x75, 0x6c, 0x74, 0x79, 0x22,
	0x16, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x10, 0x12, 0x0e, 0x2f, 0x76, 0x31, 0x2f, 0x64, 0x69, 0x66,
	0x66, 0x69, 0x63, 0x75, 0x6c, 0x74, 0x79, 0x12, 0x67, 0x0a, 0x0e, 0x70, 0x6f, 0x73, 0x74, 0x44,
	0x69, 0x66, 0x66, 0x69, 0x63, 0x75, 0x6c, 0x74, 0x79, 0x12, 0x1c, 0x2e, 0x65, 0x64, 0x75, 0x63,
	0x6f, 0x64, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x44, 0x69, 0x66,
	0x66, 0x69, 0x63, 0x75, 0x6c, 0x74, 0x79, 0x1a, 0x1c, 0x2e, 0x65, 0x64, 0x75, 0x63, 0x6f, 0x64,
	0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x44, 0x69, 0x66, 0x66, 0x69,
	0x63, 0x75, 0x6c, 0x74, 0x79, 0x22, 0x19, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x13, 0x22, 0x0e, 0x2f,
	0x76, 0x31, 0x2f, 0x64, 0x69, 0x66, 0x66, 0x69, 0x63, 0x75, 0x6c, 0x74, 0x79, 0x3a, 0x01, 0x2a,
	0x12, 0x86, 0x01, 0x0a, 0x16, 0x67, 0x65, 0x74, 0x53, 0x75, 0x62, 0x6d, 0x69, 0x73, 0x73, 0x69,
	0x6f, 0x6e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x12, 0x22, 0x2e, 0x65, 0x64,
	0x75, 0x63, 0x6f, 0x64, 0x65, 0x2e, 0x73, 0x74, 0x61, 0x74, 0x69, 0x73, 0x74, 0x69, 0x63, 0x2e,
	0x61, 0x70, 0x69, 0x2e, 0x43, 0x68, 0x61, 0x6c, 0x6c, 0x65, 0x6e, 0x67, 0x65, 0x49, 0x64, 0x1a,
	0x25, 0x2e, 0x65, 0x64, 0x75, 0x63, 0x6f, 0x64, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62,
	0x75, 0x66, 0x2e, 0x53, 0x75, 0x62, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x54, 0x69, 0x6d,
	0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x22, 0x21, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x1b, 0x12, 0x19,
	0x2f, 0x76, 0x31, 0x2f, 0x73, 0x75, 0x62, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x73, 0x2f,
	0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x12, 0x8a, 0x01, 0x0a, 0x17, 0x70, 0x6f,
	0x73, 0x74, 0x53, 0x75, 0x62, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x54, 0x69, 0x6d, 0x65,
	0x73, 0x74, 0x61, 0x6d, 0x70, 0x12, 0x22, 0x2e, 0x65, 0x64, 0x75, 0x63, 0x6f, 0x64, 0x65, 0x2e,
	0x73, 0x74, 0x61, 0x74, 0x69, 0x73, 0x74, 0x69, 0x63, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x43, 0x68,
	0x61, 0x6c, 0x6c, 0x65, 0x6e, 0x67, 0x65, 0x49, 0x64, 0x1a, 0x25, 0x2e, 0x65, 0x64, 0x75, 0x63,
	0x6f, 0x64, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53, 0x75, 0x62,
	0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70,
	0x22, 0x24, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x1e, 0x22, 0x19, 0x2f, 0x76, 0x31, 0x2f, 0x73, 0x75,
	0x62, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x73, 0x2f, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74,
	0x61, 0x6d, 0x70, 0x3a, 0x01, 0x2a, 0x12, 0x88, 0x01, 0x0a, 0x15, 0x67, 0x65, 0x74, 0x50, 0x6f,
	0x69, 0x6e, 0x74, 0x73, 0x50, 0x65, 0x72, 0x43, 0x68, 0x61, 0x6c, 0x6c, 0x65, 0x6e, 0x67, 0x65,
	0x12, 0x1d, 0x2e, 0x65, 0x64, 0x75, 0x63, 0x6f, 0x64, 0x65, 0x2e, 0x73, 0x74, 0x61, 0x74, 0x69,
	0x73, 0x74, 0x69, 0x63, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x1a,
	0x31, 0x2e, 0x65, 0x64, 0x75, 0x63, 0x6f, 0x64, 0x65, 0x2e, 0x73, 0x74, 0x61, 0x74, 0x69, 0x73,
	0x74, 0x69, 0x63, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x50, 0x6f, 0x69, 0x6e, 0x74, 0x73, 0x50, 0x65,
	0x72, 0x43, 0x68, 0x61, 0x6c, 0x6c, 0x65, 0x6e, 0x67, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x22, 0x1d, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x17, 0x12, 0x15, 0x2f, 0x76, 0x31, 0x2f,
	0x63, 0x68, 0x61, 0x6c, 0x6c, 0x65, 0x6e, 0x67, 0x65, 0x73, 0x2f, 0x70, 0x6f, 0x69, 0x6e, 0x74,
	0x73, 0x12, 0x82, 0x01, 0x0a, 0x12, 0x67, 0x65, 0x74, 0x53, 0x75, 0x62, 0x6d, 0x69, 0x73, 0x73,
	0x69, 0x6f, 0x6e, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x1d, 0x2e, 0x65, 0x64, 0x75, 0x63, 0x6f,
	0x64, 0x65, 0x2e, 0x73, 0x74, 0x61, 0x74, 0x69, 0x73, 0x74, 0x69, 0x63, 0x2e, 0x61, 0x70, 0x69,
	0x2e, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x1a, 0x2e, 0x2e, 0x65, 0x64, 0x75, 0x63, 0x6f, 0x64,
	0x65, 0x2e, 0x73, 0x74, 0x61, 0x74, 0x69, 0x73, 0x74, 0x69, 0x63, 0x2e, 0x61, 0x70, 0x69, 0x2e,
	0x53, 0x75, 0x62, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x1d, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x17, 0x12,
	0x15, 0x2f, 0x76, 0x31, 0x2f, 0x73, 0x75, 0x62, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x73,
	0x2f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x8c, 0x01, 0x0a, 0x15, 0x67, 0x65, 0x74, 0x53, 0x75,
	0x62, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x73, 0x50, 0x65, 0x72, 0x48, 0x6f, 0x75, 0x72,
	0x12, 0x1d, 0x2e, 0x65, 0x64, 0x75, 0x63, 0x6f, 0x64, 0x65, 0x2e, 0x73, 0x74, 0x61, 0x74, 0x69,
	0x73, 0x74, 0x69, 0x63, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x1a,
	0x31, 0x2e, 0x65, 0x64, 0x75, 0x63, 0x6f, 0x64, 0x65, 0x2e, 0x73, 0x74, 0x61, 0x74, 0x69, 0x73,
	0x74, 0x69, 0x63, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x53, 0x75, 0x62, 0x6d, 0x69, 0x73, 0x73, 0x69,
	0x6f, 0x6e, 0x73, 0x50, 0x65, 0x72, 0x48, 0x6f, 0x75, 0x72, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x22, 0x21, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x1b, 0x12, 0x19, 0x2f, 0x76, 0x31, 0x2f,
	0x73, 0x75, 0x62, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x73, 0x2f, 0x63, 0x6f, 0x75, 0x6e,
	0x74, 0x68, 0x6f, 0x75, 0x72, 0x12, 0x97, 0x01, 0x0a, 0x19, 0x67, 0x65, 0x74, 0x41, 0x76, 0x65,
	0x72, 0x61, 0x67, 0x65, 0x43, 0x68, 0x61, 0x6c, 0x6c, 0x65, 0x6e, 0x67, 0x65, 0x50, 0x6f, 0x69,
	0x6e, 0x74, 0x73, 0x12, 0x1d, 0x2e, 0x65, 0x64, 0x75, 0x63, 0x6f, 0x64, 0x65, 0x2e, 0x73, 0x74,
	0x61, 0x74, 0x69, 0x73, 0x74, 0x69, 0x63, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x46, 0x69, 0x6c, 0x74,
	0x65, 0x72, 0x1a, 0x35, 0x2e, 0x65, 0x64, 0x75, 0x63, 0x6f, 0x64, 0x65, 0x2e, 0x73, 0x74, 0x61,
	0x74, 0x69, 0x73, 0x74, 0x69, 0x63, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x41, 0x76, 0x65, 0x72, 0x61,
	0x67, 0x65, 0x43, 0x68, 0x61, 0x6c, 0x6c, 0x65, 0x6e, 0x67, 0x65, 0x50, 0x6f, 0x69, 0x6e, 0x74,
	0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x24, 0x82, 0xd3, 0xe4, 0x93, 0x02,
	0x1e, 0x12, 0x1c, 0x2f, 0x76, 0x31, 0x2f, 0x63, 0x68, 0x61, 0x6c, 0x6c, 0x65, 0x6e, 0x67, 0x65,
	0x2f, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x73, 0x2f, 0x61, 0x76, 0x65, 0x72, 0x61, 0x67, 0x65, 0x12,
	0x8e, 0x01, 0x0a, 0x16, 0x67, 0x65, 0x74, 0x53, 0x75, 0x62, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f,
	0x6e, 0x48, 0x69, 0x67, 0x68, 0x73, 0x63, 0x6f, 0x72, 0x65, 0x12, 0x1d, 0x2e, 0x65, 0x64, 0x75,
	0x63, 0x6f, 0x64, 0x65, 0x2e, 0x73, 0x74, 0x61, 0x74, 0x69, 0x73, 0x74, 0x69, 0x63, 0x2e, 0x61,
	0x70, 0x69, 0x2e, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x1a, 0x32, 0x2e, 0x65, 0x64, 0x75, 0x63,
	0x6f, 0x64, 0x65, 0x2e, 0x73, 0x74, 0x61, 0x74, 0x69, 0x73, 0x74, 0x69, 0x63, 0x2e, 0x61, 0x70,
	0x69, 0x2e, 0x53, 0x75, 0x62, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x48, 0x69, 0x67, 0x68,
	0x73, 0x63, 0x6f, 0x72, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x21, 0x82,
	0xd3, 0xe4, 0x93, 0x02, 0x1b, 0x12, 0x19, 0x2f, 0x76, 0x31, 0x2f, 0x73, 0x75, 0x62, 0x6d, 0x69,
	0x73, 0x73, 0x69, 0x6f, 0x6e, 0x73, 0x2f, 0x68, 0x69, 0x67, 0x68, 0x73, 0x63, 0x6f, 0x72, 0x65,
	0x12, 0x7e, 0x0a, 0x17, 0x70, 0x6f, 0x73, 0x74, 0x43, 0x68, 0x61, 0x6c, 0x6c, 0x65, 0x6e, 0x67,
	0x65, 0x43, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x69, 0x65, 0x73, 0x12, 0x25, 0x2e, 0x65, 0x64,
	0x75, 0x63, 0x6f, 0x64, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x43,
	0x68, 0x61, 0x6c, 0x6c, 0x65, 0x6e, 0x67, 0x65, 0x43, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x69,
	0x65, 0x73, 0x1a, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x22, 0x24, 0x82, 0xd3, 0xe4, 0x93,
	0x02, 0x1e, 0x22, 0x19, 0x2f, 0x76, 0x31, 0x2f, 0x63, 0x68, 0x61, 0x6c, 0x6c, 0x65, 0x6e, 0x67,
	0x65, 0x73, 0x2f, 0x63, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x69, 0x65, 0x73, 0x3a, 0x01, 0x2a,
	0x12, 0x87, 0x01, 0x0a, 0x16, 0x67, 0x65, 0x74, 0x43, 0x68, 0x61, 0x6c, 0x6c, 0x65, 0x6e, 0x67,
	0x65, 0x43, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x69, 0x65, 0x73, 0x12, 0x16, 0x2e, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d,
	0x70, 0x74, 0x79, 0x1a, 0x32, 0x2e, 0x65, 0x64, 0x75, 0x63, 0x6f, 0x64, 0x65, 0x2e, 0x73, 0x74,
	0x61, 0x74, 0x69, 0x73, 0x74, 0x69, 0x63, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x43, 0x68, 0x61, 0x6c,
	0x6c, 0x65, 0x6e, 0x67, 0x65, 0x43, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x69, 0x65, 0x73, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x21, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x1b, 0x12,
	0x19, 0x2f, 0x76, 0x31, 0x2f, 0x63, 0x68, 0x61, 0x6c, 0x6c, 0x65, 0x6e, 0x67, 0x65, 0x73, 0x2f,
	0x63, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x69, 0x65, 0x73, 0x12, 0x8b, 0x01, 0x0a, 0x16, 0x67,
	0x65, 0x74, 0x41, 0x76, 0x65, 0x72, 0x61, 0x67, 0x65, 0x44, 0x69, 0x66, 0x66, 0x69, 0x63, 0x75,
	0x6c, 0x74, 0x69, 0x65, 0x73, 0x12, 0x1d, 0x2e, 0x65, 0x64, 0x75, 0x63, 0x6f, 0x64, 0x65, 0x2e,
	0x73, 0x74, 0x61, 0x74, 0x69, 0x73, 0x74, 0x69, 0x63, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x46, 0x69,
	0x6c, 0x74, 0x65, 0x72, 0x1a, 0x32, 0x2e, 0x65, 0x64, 0x75, 0x63, 0x6f, 0x64, 0x65, 0x2e, 0x73,
	0x74, 0x61, 0x74, 0x69, 0x73, 0x74, 0x69, 0x63, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x41, 0x76, 0x65,
	0x72, 0x61, 0x67, 0x65, 0x44, 0x69, 0x66, 0x66, 0x69, 0x63, 0x75, 0x6c, 0x74, 0x69, 0x65, 0x73,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x1e, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x18,
	0x12, 0x16, 0x2f, 0x76, 0x31, 0x2f, 0x64, 0x69, 0x66, 0x66, 0x69, 0x63, 0x75, 0x6c, 0x74, 0x79,
	0x2f, 0x61, 0x76, 0x65, 0x72, 0x61, 0x67, 0x65, 0x42, 0x20, 0x0a, 0x1c, 0x64, 0x65, 0x2e, 0x68,
	0x68, 0x75, 0x2e, 0x65, 0x64, 0x75, 0x63, 0x6f, 0x64, 0x65, 0x2e, 0x73, 0x74, 0x61, 0x74, 0x69,
	0x73, 0x74, 0x69, 0x63, 0x2e, 0x61, 0x70, 0x69, 0x50, 0x01, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x33,
}

var (
	file_educode_statistic_api_v1_proto_rawDescOnce sync.Once
	file_educode_statistic_api_v1_proto_rawDescData = file_educode_statistic_api_v1_proto_rawDesc
)

func file_educode_statistic_api_v1_proto_rawDescGZIP() []byte {
	file_educode_statistic_api_v1_proto_rawDescOnce.Do(func() {
		file_educode_statistic_api_v1_proto_rawDescData = protoimpl.X.CompressGZIP(file_educode_statistic_api_v1_proto_rawDescData)
	})
	return file_educode_statistic_api_v1_proto_rawDescData
}

var file_educode_statistic_api_v1_proto_msgTypes = make([]protoimpl.MessageInfo, 10)
var file_educode_statistic_api_v1_proto_goTypes = []interface{}{
	(*ChallengeId)(nil),                       // 0: educode.statistic.api.ChallengeId
	(*AverageDifficultiesResponse)(nil),       // 1: educode.statistic.api.AverageDifficultiesResponse
	(*ChallengeCategoriesResponse)(nil),       // 2: educode.statistic.api.ChallengeCategoriesResponse
	(*Filter)(nil),                            // 3: educode.statistic.api.Filter
	(*SubmissionCountResponse)(nil),           // 4: educode.statistic.api.SubmissionCountResponse
	(*DifficultyPostRequest)(nil),             // 5: educode.statistic.api.DifficultyPostRequest
	(*PointsPerChallengeResponse)(nil),        // 6: educode.statistic.api.PointsPerChallengeResponse
	(*AverageChallengePointsResponse)(nil),    // 7: educode.statistic.api.AverageChallengePointsResponse
	(*SubmissionsPerHourResponse)(nil),        // 8: educode.statistic.api.SubmissionsPerHourResponse
	(*SubmissionHighscoreResponse)(nil),       // 9: educode.statistic.api.SubmissionHighscoreResponse
	(*protobuf.Difficulty)(nil),               // 10: educode.protobuf.Difficulty
	(*protobuf.SubmissionCount)(nil),          // 11: educode.protobuf.SubmissionCount
	(*protobuf.PointsPerChallenge)(nil),       // 12: educode.protobuf.PointsPerChallenge
	(*protobuf.AverageChallengePoints)(nil),   // 13: educode.protobuf.AverageChallengePoints
	(*protobuf.SubmissionsPerHour)(nil),       // 14: educode.protobuf.SubmissionsPerHour
	(*protobuf.SubmissionHighscoreEntry)(nil), // 15: educode.protobuf.SubmissionHighscoreEntry
	(*protobuf.ChallengeCategories)(nil),      // 16: educode.protobuf.ChallengeCategories
	(*emptypb.Empty)(nil),                     // 17: google.protobuf.Empty
	(*protobuf.SubmissionTimestamp)(nil),      // 18: educode.protobuf.SubmissionTimestamp
}
var file_educode_statistic_api_v1_proto_depIdxs = []int32{
	10, // 0: educode.statistic.api.AverageDifficultiesResponse.challenges:type_name -> educode.protobuf.Difficulty
	11, // 1: educode.statistic.api.SubmissionCountResponse.count:type_name -> educode.protobuf.SubmissionCount
	12, // 2: educode.statistic.api.PointsPerChallengeResponse.points:type_name -> educode.protobuf.PointsPerChallenge
	13, // 3: educode.statistic.api.AverageChallengePointsResponse.challenges:type_name -> educode.protobuf.AverageChallengePoints
	14, // 4: educode.statistic.api.SubmissionsPerHourResponse.hours:type_name -> educode.protobuf.SubmissionsPerHour
	15, // 5: educode.statistic.api.SubmissionHighscoreResponse.highscore:type_name -> educode.protobuf.SubmissionHighscoreEntry
	0,  // 6: educode.statistic.api.StatisticService.getDifficulty:input_type -> educode.statistic.api.ChallengeId
	10, // 7: educode.statistic.api.StatisticService.postDifficulty:input_type -> educode.protobuf.Difficulty
	0,  // 8: educode.statistic.api.StatisticService.getSubmissionTimestamp:input_type -> educode.statistic.api.ChallengeId
	0,  // 9: educode.statistic.api.StatisticService.postSubmissionTimestamp:input_type -> educode.statistic.api.ChallengeId
	3,  // 10: educode.statistic.api.StatisticService.getPointsPerChallenge:input_type -> educode.statistic.api.Filter
	3,  // 11: educode.statistic.api.StatisticService.getSubmissionCount:input_type -> educode.statistic.api.Filter
	3,  // 12: educode.statistic.api.StatisticService.getSubmissionsPerHour:input_type -> educode.statistic.api.Filter
	3,  // 13: educode.statistic.api.StatisticService.getAverageChallengePoints:input_type -> educode.statistic.api.Filter
	3,  // 14: educode.statistic.api.StatisticService.getSubmissionHighscore:input_type -> educode.statistic.api.Filter
	16, // 15: educode.statistic.api.StatisticService.postChallengeCategories:input_type -> educode.protobuf.ChallengeCategories
	17, // 16: educode.statistic.api.StatisticService.getChallengeCategories:input_type -> google.protobuf.Empty
	3,  // 17: educode.statistic.api.StatisticService.getAverageDifficulties:input_type -> educode.statistic.api.Filter
	10, // 18: educode.statistic.api.StatisticService.getDifficulty:output_type -> educode.protobuf.Difficulty
	10, // 19: educode.statistic.api.StatisticService.postDifficulty:output_type -> educode.protobuf.Difficulty
	18, // 20: educode.statistic.api.StatisticService.getSubmissionTimestamp:output_type -> educode.protobuf.SubmissionTimestamp
	18, // 21: educode.statistic.api.StatisticService.postSubmissionTimestamp:output_type -> educode.protobuf.SubmissionTimestamp
	6,  // 22: educode.statistic.api.StatisticService.getPointsPerChallenge:output_type -> educode.statistic.api.PointsPerChallengeResponse
	4,  // 23: educode.statistic.api.StatisticService.getSubmissionCount:output_type -> educode.statistic.api.SubmissionCountResponse
	8,  // 24: educode.statistic.api.StatisticService.getSubmissionsPerHour:output_type -> educode.statistic.api.SubmissionsPerHourResponse
	7,  // 25: educode.statistic.api.StatisticService.getAverageChallengePoints:output_type -> educode.statistic.api.AverageChallengePointsResponse
	9,  // 26: educode.statistic.api.StatisticService.getSubmissionHighscore:output_type -> educode.statistic.api.SubmissionHighscoreResponse
	17, // 27: educode.statistic.api.StatisticService.postChallengeCategories:output_type -> google.protobuf.Empty
	2,  // 28: educode.statistic.api.StatisticService.getChallengeCategories:output_type -> educode.statistic.api.ChallengeCategoriesResponse
	1,  // 29: educode.statistic.api.StatisticService.getAverageDifficulties:output_type -> educode.statistic.api.AverageDifficultiesResponse
	18, // [18:30] is the sub-list for method output_type
	6,  // [6:18] is the sub-list for method input_type
	6,  // [6:6] is the sub-list for extension type_name
	6,  // [6:6] is the sub-list for extension extendee
	0,  // [0:6] is the sub-list for field type_name
}

func init() { file_educode_statistic_api_v1_proto_init() }
func file_educode_statistic_api_v1_proto_init() {
	if File_educode_statistic_api_v1_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_educode_statistic_api_v1_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ChallengeId); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_educode_statistic_api_v1_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AverageDifficultiesResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_educode_statistic_api_v1_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ChallengeCategoriesResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_educode_statistic_api_v1_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Filter); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_educode_statistic_api_v1_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SubmissionCountResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_educode_statistic_api_v1_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DifficultyPostRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_educode_statistic_api_v1_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PointsPerChallengeResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_educode_statistic_api_v1_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AverageChallengePointsResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_educode_statistic_api_v1_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SubmissionsPerHourResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_educode_statistic_api_v1_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SubmissionHighscoreResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_educode_statistic_api_v1_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   10,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_educode_statistic_api_v1_proto_goTypes,
		DependencyIndexes: file_educode_statistic_api_v1_proto_depIdxs,
		MessageInfos:      file_educode_statistic_api_v1_proto_msgTypes,
	}.Build()
	File_educode_statistic_api_v1_proto = out.File
	file_educode_statistic_api_v1_proto_rawDesc = nil
	file_educode_statistic_api_v1_proto_goTypes = nil
	file_educode_statistic_api_v1_proto_depIdxs = nil
}
